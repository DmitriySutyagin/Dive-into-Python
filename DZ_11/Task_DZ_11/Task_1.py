# Разработайте программное обеспечение для ведения журнала событий. Вам необходимо создать класс,
# который будет представлять строки журнала и включать в себя информацию об авторе и времени создания каждой записи.

# Условие задачи:

# Создайте класс MyStr, который наследуется от встроенного класса str и добавлять дополнительную информацию о создателе строки и времени ее создания. 
# Этот класс будет представлять строки с информацией о событиях.

# Класс MyStr должен иметь следующие атрибуты и методы:

# value (str): Строковое значение с описанием события.
# author (str): Имя автора, создавшего запись.
# time: Время создания записи в формате '%Y-%m-%d %H:%M'.

# Магические методы (Dunder-методы):

# Реализуйте метод __new__(cls, value, author), который создает новый объект класса MyStr с заданным value и author. Метод также автоматически фиксирует время создания записи.
# В этом методе создается новый объект MyStr с указанными атрибутами и текущим временем в атрибуте time.

# Реализуйте метод __str__(self), который возвращает строковое представление объекта класса MyStr с информацией о событии, авторе и времени создания.

# Реализуйте метод __repr__(self), который возвращает строковое представление объекта класса MyStr.  
# Метод __repr__ возвращает строку, 
# которая может быть использована для создания точно такого же объектаMyStrс теми же значениямиvalueиauthor`

import time


class MyStr(str):

    def __new__(cls, value: str, author: str):
        cls.intence = super().__new__(cls)
        cls.intence.value = value
        cls.intence.author = author
        cls.intence.time = time.strftime('%Y-%m-%d %H:%M')
        return cls.intence 
    
    def __str__(self) -> str:
        return f'{self.intence.value} (Автор: {self.intence.author}, Время создания: {self.intence.time})'

    def __repr__(self) -> str:
        return f"MyStr('{self.value}', '{self.author}')"



event = MyStr("Завершилось тестирование", "John")
print(event)
print(repr(event))